var assert = require('assert');
var Lazy = require('..');
var expresso = expresso;

function range(i, j, s) {
    var r = [];
    var s = s || 1;
    if (j > i) for (;i<j;i+=s) r.push(i);
    else for(;i>j;i-=s) r.push(i);
    return r;
}

exports['infinite range'] = function () {
    var joinExecuted = false;
    Lazy.range('10..').take(10).join(function (xs) {
        joinExecuted = true;
        assert.deepEqual(xs, range(10, 20));
        assert.equal(xs.length, 10);
    });

    setTimeout(function () {
        assert.ok(joinExecuted, 'join didn\'t execute');
    }, 2000);
}

exports['infinite range half-open'] = function () {
    var joinExecuted = false;
    Lazy.range('(10..').take(10).join(function (xs) {
        joinExecuted = true;
        assert.deepEqual(xs, range(11, 21));
        assert.equal(xs.length, 10);
    });

    setTimeout(function () {
        assert.ok(joinExecuted, 'join didn\'t execute');
    }, 2000);
}

exports['range i'] = function () {
    var joinExecuted = false;
    Lazy.range(10).join(function (xs) {
        joinExecuted = true;
        assert.deepEqual(xs, range(0, 10));
        assert.equal(xs.length, 10);
    });

    setTimeout(function () {
        assert.ok(joinExecuted, 'join didn\'t execute');
    }, 2000);
}

exports['range i,j (i<j)'] 